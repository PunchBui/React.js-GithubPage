{"version":3,"sources":["Assets/Profile.jpg","Components/Header.js","StyledCom/flexbox.js","Components/testProps.js","Components/testProps2.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Wrapper","Button","styled","div","button","FlexboxCenter","TestProps","props","reciveValue","parentValue","style","height","width","display","flexDirection","justifyContent","alignItems","backgroundColor","borderRadius","boxShadow","margin","onClick","childToParent","color","testProps2","secondChildValue","Main","setState","childValue","childToChild","state","this","ProfileContainer","React","Component","About","img","Post","Project","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,qC,2pBCG3C,IAQeC,EARA,WACX,OACE,kBAACC,EAAD,KACI,kBAACC,EAAD,gBAOJD,EAAUE,IAAOC,IAAV,KASPF,EAASC,IAAOE,OAAV,K,uSCpBL,IAAMC,EAAgBH,IAAOC,IAAV,K,GAMMD,IAAOC,IAAV,K,cCsBdG,EA1BG,SAACC,GACf,IAAIC,EAAcD,EAAME,YAAc,UAAY,OAClD,OACI,yBAAKC,MAAO,CACRC,OAAQ,QACRC,MAAO,QACPC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,gBAAiB,UACjBC,aAAc,OACdC,UAAW,WACXC,OAAQ,SAER,6CACA,4BAAQC,QAAS,kBAAM,EAAKd,MAAMe,kBAAlC,gBACA,0BAAMZ,MAAO,CACTa,MAAO,YAENf,KCKFgB,EAzBI,SAACjB,GAChB,OACI,yBAAKG,MAAO,CACRC,OAAQ,QACRC,MAAO,QACPC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,gBAAiB,UACjBC,aAAc,OACdC,UAAW,WACXC,OAAQ,SAER,8CACA,sDACA,0BAAMV,MAAO,CACTa,MAAO,YAENhB,EAAMkB,oB,kYCsCRC,E,YArDX,WAAYnB,GAAO,IAAD,8BACd,4CAAMA,KAYVe,cAAgB,WACZ,EAAKK,SAAS,CACVC,WAAa,aAfH,EAkBlBC,aAAe,WACX,EAAKF,SAAS,CACVF,iBAAmB,aAlBvB,EAAKK,MAAQ,CACXrB,YAAc,QACdmB,WAAa,QACbH,iBAAmB,SALP,E,6EASdM,KAAKJ,SAAS,CACVlB,YAAc,c,+BAclB,OACA,kBAAC,EAAD,KACI,kBAACuB,EAAD,KAGI,kBAAC,EAAD,CAAWvB,YAAesB,KAAKD,MAAMrB,YAAaa,cAAiBS,KAAKT,gBACxE,yBAAKZ,MAAO,CACRC,OAAQ,QACRC,MAAO,QACPC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,gBAAiB,UACjBC,aAAc,OACdC,UAAW,WACXC,OAAQ,SAER,wCACA,+CACA,8BAAOW,KAAKD,MAAMF,aAEtB,kBAAC,EAAD,CAAYH,iBAAoBM,KAAKD,MAAML,yB,GA/CxCQ,IAAMC,WAwDnBlC,EAAUE,IAAOC,IAAV,KAQP6B,EAAmB9B,YAAOG,EAAPH,CAAH,KCjEhBiC,GDuEajC,IAAOkC,IAAV,KCvEF,kBAAM,uCACdC,EAAO,kBAAM,qCACbC,EAAU,kBAAM,wCAgBPC,E,iLAZX,OACE,yBAAKC,UAAU,iBACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IACjC,kBAAC,IAAD,CAAOgB,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWN,IAChC,kBAAC,IAAD,CAAOK,KAAK,YAAYC,UAAWL,S,GARzBJ,aCEEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCLNC,IAASC,OAAO,mBANM,kBACpB,kBAAC,IAAD,KACE,kBAAC,EAAD,SAIY,MAAmBC,SAASC,eAAe,SDsHrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a6cd83df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Profile.995cce3d.jpg\";","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Header = () => {\r\n    return (\r\n      <Wrapper>\r\n          <Button>About</Button>\r\n      </Wrapper>\r\n    )\r\n}\r\n  \r\nexport default Header\r\n\r\nconst Wrapper = styled.div`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nwidth: 100%;\r\nheight: 70px;\r\nbackground: linear-gradient(135deg, rgba(218,0,222,1) 0%, rgba(218,0,222,1) 2%, rgba(224,49,90,1) 46%, rgba(214,185,0,1) 100%);\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: transparent;\r\n  border-radius: 3px;\r\n  border: 2px solid palevioletred;\r\n  color: palevioletred;\r\n  margin: 0.5em 1em;\r\n  padding: 0.25em 1em;\r\n`;","import styled from 'styled-components'\r\n\r\nexport const FlexboxCenter = styled.div`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\n`;\r\n\r\nexport const FlexboxRowCenter = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n`;","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FlexboxCenter } from '../StyledCom/flexbox.js'\r\n\r\nconst TestProps = (props) => {\r\n    let reciveValue = props.parentValue ? \"success\" : \"fail\"\r\n    return(\r\n        <div style={{\r\n            height: \"200px\",\r\n            width: \"300px\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            backgroundColor: \"#CCCCCC\",\r\n            borderRadius: \"25px\",\r\n            boxShadow: \"5px 10px\",\r\n            margin: \"20px\"\r\n        }}>\r\n            <span>First child</span>\r\n            <button onClick={() => this.props.childToParent()}>Parent Value</button>\r\n            <span style={{\r\n                color: \"#000000\"\r\n            }}>\r\n                {reciveValue}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TestProps;","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FlexboxCenter } from '../StyledCom/flexbox.js'\r\n\r\nconst testProps2 = (props) => {\r\n    return(\r\n        <div style={{\r\n            height: \"200px\",\r\n            width: \"300px\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            backgroundColor: \"#CCCCCC\",\r\n            borderRadius: \"25px\",\r\n            boxShadow: \"5px 10px\",\r\n            margin: \"20px\"\r\n        }}>\r\n            <span>Second child</span>\r\n            <button>Second Child Value</button>\r\n            <span style={{\r\n                color: \"#000000\"\r\n            }}>\r\n                {props.secondChildValue}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default testProps2","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FlexboxCenter } from '../StyledCom/flexbox.js'\r\nimport profile from '../Assets/Profile.jpg'\r\nimport TestProps from './testProps.js'\r\nimport TestProps2 from './testProps2.js'\r\n\r\nclass Main extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n          parentValue : \"ready\",\r\n          childValue : \"ready\",\r\n          secondChildValue : \"ready\",\r\n        };\r\n    }\r\n    parentToChild() {\r\n        this.setState({\r\n            parentValue : \"success\"\r\n        });\r\n    }\r\n    childToParent = () => {\r\n        this.setState({\r\n            childValue : \"success\"\r\n        });\r\n    }\r\n    childToChild = () => {\r\n        this.setState({\r\n            secondChildValue : \"success\"\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n        <Wrapper>\r\n            <ProfileContainer>\r\n                \r\n                {/* <ProfileImg src={profile} /> */}\r\n                <TestProps parentValue = {this.state.parentValue} childToParent = {this.childToParent}/>\r\n                <div style={{\r\n                    height: \"200px\",\r\n                    width: \"300px\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    backgroundColor: \"#CCCCCC\",\r\n                    borderRadius: \"25px\",\r\n                    boxShadow: \"5px 10px\",\r\n                    margin: \"20px\"\r\n                }}>\r\n                    <span>Parent</span>\r\n                    <button>Child value</button>\r\n                    <span>{this.state.childValue}</span>\r\n                </div>\r\n                <TestProps2 secondChildValue = {this.state.secondChildValue}/>\r\n            </ProfileContainer>\r\n        </Wrapper>\r\n        )\r\n    }\r\n}\r\n  \r\nexport default Main\r\n\r\nconst Wrapper = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\nwidth: 100%;\r\n`;\r\n\r\nconst ProfileContainer = styled(FlexboxCenter)`\r\nheight: 300px;\r\nwidth: 100%;\r\n/* background-color: #000000; */\r\n`;\r\n\r\nconst ProfileImg = styled.img`\r\n\r\n`;","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport Header from './Components/Header.js'\nimport Main from './Components/Main.js'\n\nconst Home = () => <h1>Home</h1>\nconst About = () => <h1>About</h1>\nconst Post = () => <h1>Post</h1>\nconst Project = () => <h1>Project</h1>\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App container\">\n        <Header/>\n        <Route exact path=\"/\" component={Main}/>\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/posts\" component={Post} />\n        <Route path=\"/projects\" component={Project} />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nconst AppWithRouter = () => (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(<AppWithRouter />, document.getElementById('root'))\nserviceWorker.unregister();"],"sourceRoot":""}